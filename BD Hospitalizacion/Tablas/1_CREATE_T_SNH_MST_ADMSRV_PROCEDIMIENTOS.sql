RENAME SNH_MST_ADMSRV_PROCEDIMIENTOS TO SNH_MST_ADMSRV_PROCEDIMIENTO_1;

CREATE SEQUENCE HOSPITALARIO.SNH_S_ADMSRV_PROCEDIMIENTOS_ID
  START WITH 1
  MAXVALUE 9999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER
  NOKEEP
  GLOBAL;
  
  
GRANT ALTER, SELECT ON HOSPITALARIO.SNH_S_ADMSRV_PROCEDIMIENTOS_ID TO CATALOGOS, SEGURIDAD, VIGILANCIA, SIPAI;  


CREATE TABLE HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS
(
  ADMSRV_PROCEDIMIENTO_ID  NUMBER(10) DEFAULT HOSPITALARIO.SNH_S_ADMSRV_PROCEDIMIENTOS_ID.NEXTVAL CONSTRAINT PK_ADMSRV_PROCEDIMIENTO_ID PRIMARY KEY NOT NULL,
  ADMISION_SRV_ID          NUMBER(1.) CONSTRAINT NNC_ADMPROC_ADMSRV_ID NOT NULL,
  MPERS_SALUD_ID           NUMBER(10) CONSTRAINT NNC_ADMPROC_MPERSAL_ID NOT NULL,
  UNIDAD_SALUD_ID          NUMBER(10) CONSTRAINT NNC_ADMPROC_UNDSALUD_ID NOT NULL,
  TIPO_PROCEDIMIENTO_ID    NUMBER(10) CONSTRAINT NNC_ADMPROC_TIPPROCED NOT NULL,
--  TIP_DET_PROCEDIMIENTO_ID NUMBER(10) CONSTRAINT NNC_ADMPROC_TIP_DET_PROCED NOT NULL,  --- Se deja comentareado, porque esta columna va en otra tabla creada.
  ESTADO_REGISTRO_ID       NUMBER(10) CONSTRAINT NNC_ADMPROC_ESTADOREG NOT NULL,
  USUARIO_REGISTRO         VARCHAR2(50 BYTE) CONSTRAINT NNC_ADMPROC_USR_REG NOT NULL,
  FECHA_REGISTRO           TIMESTAMP(0)DEFAULT CURRENT_TIMESTAMP CONSTRAINT NNC_ADMPROC_FEC_REG NOT NULL,
  USUARIO_MODIFICACION     VARCHAR2(50 BYTE),
  FECHA_MODIFICACION       TIMESTAMP(0),
  USUARIO_PASIVA           VARCHAR2(50 BYTE),
  FECHA_PASIVA             TIMESTAMP(0),
  USUARIO_ELIMINA          VARCHAR2(50 BYTE),
  FECHA_ELIMINA            TIMESTAMP(0)  
);


-- ALTER TABLE HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS ADD (TIP_DET_PROCEDIMIENTO_ID NUMBER(10) CONSTRAINT NNC_ADMPROC_TIP_DET_PROCED NOT NULL);


--CREATE UNIQUE INDEX HOSPITALARIO.PRK_ADMPROC_PROCEDIMIENTO_ID ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS
--(ADMSRV_PROCEDIMIENTO_ID);

CREATE INDEX HOSPITALARIO.IDX_ADMPROC_ADM_SRV_ID ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS
(ADMISION_SRV_ID);

CREATE INDEX HOSPITALARIO.IDX_ADMPROC_MPERSSALUD_ID ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS
(MPERS_SALUD_ID);

CREATE INDEX HOSPITALARIO.IDX_ADMPROC_TIPPROCED_ID ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS
(TIPO_PROCEDIMIENTO_ID);


CREATE INDEX HOSPITALARIO.IDX_ADMPROC_USAL_TIPPROCED_ID ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS
(UNIDAD_SALUD_ID, TIPO_PROCEDIMIENTO_ID);


CREATE INDEX HOSPITALARIO.IDX_ADMPROC_ESTREGISTRO_ID ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS
(ESTADO_REGISTRO_ID);

CREATE INDEX HOSPITALARIO.IDX_ADMPROC_USR_REGISTRO ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS
(USUARIO_REGISTRO);


CREATE INDEX HOSPITALARIO.IDX_ADMPROC_FEC_REGISTRO ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS
(TRUNC(FECHA_REGISTRO));




CREATE OR REPLACE TRIGGER TRG_AUD_SNH_ADMSRV_PROCED
BEFORE INSERT OR UPDATE ON SNH_MST_ADMSRV_PROCEDIMIENTOS FOR EACH ROW
BEGIN
    IF INSERTING THEN
      -- :NEW.ADMSRV_PROCEDIMIENTO_ID  := HOSPITALARIO.SNH_S_ADMSRV_PROCEDIMIENTOS_ID.NEXTVAL;
       :NEW.FECHA_REGISTRO           := SYSDATE;
    ELSE
       IF :NEW.USUARIO_MODIFICACION IS NULL THEN
           RAISE_APPLICATION_ERROR (-20000, 'El usuario modificación no puede quedar nulo.');
       ELSE
       :NEW.FECHA_MODIFICACION   := SYSDATE;
       END IF;
    END IF;
END;
/

-- estado registro
CREATE OR REPLACE TRIGGER HOSPITALARIO.TRG_SNH_ADMSRV_ESTADO_REGISTRO
BEFORE INSERT OR UPDATE OF ESTADO_REGISTRO_ID ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS FOR EACH ROW
BEGIN
    IF INSERTING THEN
      IF  (:NEW.ESTADO_REGISTRO_ID IS NOT NULL AND :NEW.ESTADO_REGISTRO_ID > 0)   THEN
             DECLARE
              vCONTEO     SIMPLE_INTEGER := 0;
              vCatalogoId CATALOGOS.SBC_CAT_CATALOGOS.CATALOGO_ID%TYPE;
             BEGIN
              SELECT COUNT (1)
                INTO vCONTEO
                FROM CATALOGOS.SBC_CAT_CATALOGOS
               WHERE CATALOGO_ID = :NEW.ESTADO_REGISTRO_ID AND
                     PASIVO = 0 AND
                     CATALOGO_SUP IS NOT NULL;
                
                CASE vCONTEO 
                WHEN 0 THEN
                     RAISE_APPLICATION_ERROR (-20000, 'El estado del registro, no es un valor valido. Estado registro id: '||:NEW.ESTADO_REGISTRO_ID);
                ELSE
                    BEGIN
                      vCONTEO := 0;
                      SELECT CATALOGO_SUP
                        INTO vCatalogoId
                        FROM CATALOGOS.SBC_CAT_CATALOGOS
                       WHERE CATALOGO_ID = :NEW.ESTADO_REGISTRO_ID AND
                             PASIVO = 0 ;
                    
                        BEGIN
                          SELECT COUNT (1)
                            INTO vCONTEO
                            FROM CATALOGOS.SBC_CAT_CATALOGOS
                           WHERE CATALOGO_ID = vCatalogoId AND
                                 PASIVO = 0 AND
                                 CODIGO = 'STREG';       
                           CASE vCONTEO 
                           WHEN 0 THEN
                                RAISE_APPLICATION_ERROR (-20000, 'El estado registro, no es un valor valido. Estado registro id: '||:NEW.ESTADO_REGISTRO_ID);                
                           ELSE NULL;
                           END CASE;
                        END;  
                    END;
                END CASE;
             END;
      END IF;
    ELSIF UPDATING THEN
       IF :NEW.ESTADO_REGISTRO_ID IS NOT NULL THEN
         IF NVL(:NEW.ESTADO_REGISTRO_ID,0) != NVL(:OLD.ESTADO_REGISTRO_ID,0) THEN
             DECLARE
              vCONTEO SIMPLE_INTEGER := 0;
              vCatalogoId CATALOGOS.SBC_CAT_CATALOGOS.CATALOGO_ID%TYPE;
             BEGIN
              SELECT COUNT (1)
                INTO vCONTEO
                FROM CATALOGOS.SBC_CAT_CATALOGOS
               WHERE CATALOGO_ID = :NEW.ESTADO_REGISTRO_ID AND
                     PASIVO = 0 AND
                     CATALOGO_SUP IS NOT NULL;
                
                CASE vCONTEO 
                WHEN 0 THEN
                     RAISE_APPLICATION_ERROR (-20000, 'El estado registro, no es un valor valido. Estado registro id: '||:NEW.ESTADO_REGISTRO_ID);
                ELSE
                    BEGIN
                      vCONTEO := 0;
                      SELECT CATALOGO_SUP
                        INTO vCatalogoId
                        FROM CATALOGOS.SBC_CAT_CATALOGOS
                       WHERE CATALOGO_ID = :NEW.ESTADO_REGISTRO_ID AND
                             PASIVO = 0 ;
                    
                        BEGIN
                          SELECT COUNT (1)
                            INTO vCONTEO
                            FROM CATALOGOS.SBC_CAT_CATALOGOS
                           WHERE CATALOGO_ID = vCatalogoId AND
                                 PASIVO = 0 AND
                                 CODIGO = 'STREG';       
                           CASE vCONTEO 
                           WHEN 0 THEN
                                RAISE_APPLICATION_ERROR (-20000, 'El estado registro, no es un valor valido. Estado registro id: '||:NEW.ESTADO_REGISTRO_ID);                
                           ELSE NULL;
                           END CASE;
                        END;  
                    END;
                END CASE;            
             END;  
         END IF;
       END IF;
    END IF;
END;
/


--ALTER TABLE HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS ADD (
----  CONSTRAINT PK_ADMSRV_PROCEDIMIENTO_ID
----  PRIMARY KEY
----  (ADMSRV_PROCEDIMIENTO_ID)
----  USING INDEX HOSPITALARIO.PRK_ADMSRV_PROCEDIMIENTO_ID
----  ENABLE VALIDATE,
--  CONSTRAINT UQK_ADSRPR_CODIGO
--  UNIQUE (CODIGO)
--  USING INDEX HOSPITALARIO.UQK_ADSRPR_CODIGO
--  ENABLE VALIDATE);

--ALTER TABLE HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS ADD (
--      CONSTRAINT FRK_ADMPROC_TIP_DET_PROCED
--      FOREIGN KEY (TIP_DET_PROCEDIMIENTO_ID) 
--      REFERENCES CATALOGOS.SBC_CAT_CATALOGOS (CATALOGO_ID)
--      ENABLE VALIDATE);     

ALTER TABLE HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS ADD (
  CONSTRAINT FRK_ADMPROC_ADMSRV_ID 
  FOREIGN KEY (ADMISION_SRV_ID) 
  REFERENCES HOSPITALARIO.SNH_MST_ADMISION_SERVICIOS (ADMISION_SERVICIO_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_ADMPROC_MPRSLD_ID 
  FOREIGN KEY (MPERS_SALUD_ID) 
  REFERENCES CATALOGOS.SBC_MST_MPERS_SALUD (MPERS_SALUD_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_ADMPROC_UNIDAD_SALUD_ID 
  FOREIGN KEY (UNIDAD_SALUD_ID) 
  REFERENCES CATALOGOS.SBC_CAT_UNIDADES_SALUD (UNIDAD_SALUD_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_ADMPROC_ESTADO_REG_ID 
  FOREIGN KEY (ESTADO_REGISTRO_ID) 
  REFERENCES CATALOGOS.SBC_CAT_CATALOGOS (CATALOGO_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_ADMPROC_USR_REGISTRO 
  FOREIGN KEY (USUARIO_REGISTRO) 
  REFERENCES SEGURIDAD.SCS_MST_USUARIOS (USERNAME)
  ENABLE VALIDATE,
  CONSTRAINT FRK_ADMPROC_USR_MODIFCACION 
  FOREIGN KEY (USUARIO_MODIFICACION) 
  REFERENCES SEGURIDAD.SCS_MST_USUARIOS (USERNAME)
  ENABLE VALIDATE,
  CONSTRAINT FRK_ADMPROC_USR_PASIVO 
  FOREIGN KEY (USUARIO_PASIVA) 
  REFERENCES SEGURIDAD.SCS_MST_USUARIOS (USERNAME)
  ENABLE VALIDATE
  );

GRANT DELETE, INDEX, INSERT, SELECT, UPDATE  ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS TO CATALOGOS, SEGURIDAD, VIGILANCIA, SIPAI;

GRANT ALTER, DELETE, INDEX, INSERT, REFERENCES, SELECT, UPDATE, ON COMMIT REFRESH, QUERY REWRITE, DEBUG, FLASHBACK ON HOSPITALARIO.SNH_MST_ADMSRV_PROCEDIMIENTOS TO FORTEGA;

