--- se crea esta función, la cual es llamada desde la columna virtual de Dias_estancias
CREATE OR REPLACE FUNCTION HOSPITALARIO.FECHA_ACTUAL RETURN DATE DETERMINISTIC AS
BEGIN
  RETURN (TRUNC(SYSDATE));
END FECHA_ACTUAL;



CREATE SEQUENCE HOSPITALARIO.SNH_S_INGR_EGR_ID
  START WITH 1
  MAXVALUE 9999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER
  NOKEEP
  GLOBAL;
  

GRANT ALTER, SELECT ON HOSPITALARIO.SNH_S_INGR_EGR_ID TO CATALOGOS, SEGURIDAD, VIGILANCIA, SIPAI; 
   

CREATE TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(
 INGRESO_ID                    NUMBER(10)          DEFAULT HOSPITALARIO.SNH_S_INGR_EGR_ID.NEXTVAL CONSTRAINT PK_INGREGR_INGRESO_ID PRIMARY KEY NOT NULL,
 PREG_INGRESO_ID               NUMBER(10)          CONSTRAINT NNC_INGREGR_PREG_INGRESO_ID NOT NULL,
 PER_NOMINAL_ID                NUMBER(10)          CONSTRAINT NNC_INGREGR_PERNOMINALID NOT NULL, 
 PROCEDENCIA_ID                NUMBER(10)          CONSTRAINT NNC_INGREGR_PROCEDENCIA_ID NOT NULL, 
 ADMISION_SERVICIO_ID          NUMBER(10)          CONSTRAINT NNC_INGREGR_ADMSRV_ID NOT NULL,
 EDAD_EXACTA_INGRESO           VARCHAR2(20)        CONSTRAINT NNC_INGREGR_EDAD_INGRESO NOT NULL,
 GRUPO_ETAREO_ID               NUMBER(10)          CONSTRAINT NNC_INGREGR_GRP_ETAREO_ID NOT NULL,
 MEDICO_INGRESO_ID             NUMBER(10)          CONSTRAINT NNC_INGREGR_MEDICO_INGRESO_ID NOT NULL,
 ADMISIONISTA_SOLICITA_INGR_ID NUMBER(10)          CONSTRAINT NNC_INGREGR_ADMISIONISTA_ID NOT NULL,
 ADMISIONISTA_INGRESO_ID       NUMBER(10)          CONSTRAINT NNC_INGREGR_ADMISI_INGRESO_ID NOT NULL,
 MEDICO_ORDENA_INGRESO_ID      NUMBER(10)          CONSTRAINT NNC_INGREGR_MEDICO_ORDENA_ID NOT NULL,
 SERVICIO_PROCEDENCIA_ID       NUMBER(10)          CONSTRAINT NNC_INGREGR_SRV_PROCEDENCIA_ID NOT NULL,
 REINGRESO                     NUMBER(1)           CONSTRAINT NNC_INGREGR_PREG_REINGRESO NOT NULL,
 REINGRESO_ID                  NUMBER(10),          
 FECHA_SOLICITUD_INGRESO       TIMESTAMP(0)        CONSTRAINT NNC_INGREGR_FEC_SOLICITUD_ING NOT NULL,
 HORA_SOLICITUD_INGRESO        VARCHAR2(15 BYTE)   CONSTRAINT NNC_INGREGR_HR_SOLICITUD_ING NOT NULL,
 FECHA_INICIO_INGRESO          TIMESTAMP(0)        CONSTRAINT NNC_INGREGR_FEC_INI_INGR NOT NULL,
 HORA_INICIO_INGRESO           VARCHAR2(15 BYTE)   CONSTRAINT NNC_INGREGR_HR_INI_INGR NOT NULL,
 UNIDAD_SALUD_INGRESO          NUMBER(10)          CONSTRAINT NNC_INGREGR_USALUD_ING_ID NOT NULL,
 SERVICIO_INGRESO_ID           NUMBER(10),        
 ESTADO_INGRESO_ID             NUMBER(10)          CONSTRAINT NNC_INGREGR_ESTADO_INGR_ID NOT NULL,
 TIPO_EGRESO_ID                NUMBER(10),
 FECHA_FIN_INGRESO             TIMESTAMP(0),
 HORA_FIN_INGRESO              VARCHAR2(15 BYTE),
 SERVICIO_EGRESO_ID            NUMBER(10),
 MEDICO_EGRESO_ID              NUMBER(10),
 REFERENCIA_ID                 NUMBER(10),
 ES_CONTRAFERIDO               NUMBER(1)           CONSTRAINT NNC_INGREGR_CONTRAREF NOT NULL,
 ENVIO_CONTRAREFERENCIA_ID     NUMBER(10), 
 DIAS_ESTANCIA                 NUMBER(10) GENERATED ALWAYS AS (CASE NVL(FECHA_FIN_INGRESO, HOSPITALARIO.FECHA_ACTUAL) - FECHA_INICIO_INGRESO
                                                               WHEN 0 THEN 1
                                                               ELSE NVL(FECHA_FIN_INGRESO, HOSPITALARIO.FECHA_ACTUAL) - FECHA_INICIO_INGRESO
                                                               END) VIRTUAL,
 ESTADO_PX_ID                  NUMBER(10), 
 ESTADO_PX_EGRESO_ID           NUMBER(10), 
 COMENTARIOS                   VARCHAR2(1000 BYTE),
 ESTADO_REGISTRO_ID            NUMBER(10)          CONSTRAINT NNC_INGREGR_ESTADOREG NOT NULL,   
 USUARIO_REGISTRO              VARCHAR2(50 BYTE)   CONSTRAINT NNC_INGREGR_USR_REG NOT NULL,
 FECHA_REGISTRO                TIMESTAMP(0)        DEFAULT CURRENT_TIMESTAMP CONSTRAINT NNC_INGREGR_FEC_REG NOT NULL,
 USUARIO_REGISTRO_EGRESO       VARCHAR2(50 BYTE),
 FECHA_REGISTRO_EGRESO         TIMESTAMP(0), 
 USUARIO_MODIFICACION          VARCHAR2(50 BYTE),
 FECHA_MODIFICACION            TIMESTAMP(0),
 USUARIO_PASIVA                VARCHAR2(50 BYTE),
 FECHA_PASIVA                  TIMESTAMP(0),
 USUARIO_ELIMINA               VARCHAR2(50 BYTE),
 FECHA_ELIMINA                 TIMESTAMP(0)  
 );

--
--Alter table HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS set unused column DIAS_ESTANCIA;
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS MODIFY DIAS_ESTANCIA NUMBER(10) GENERATED ALWAYS AS (NVL(FECHA_FIN_INGRESO, SYSDATE) - FECHA_INICIO_INGRESO) VIRTUAL;
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS ADD DIAS_ESTANCIA NUMBER(10) GENERATED ALWAYS AS (NVL(FECHA_FIN_INGRESO, HOSPITALARIO.FECHA_ACTUAL) - FECHA_INICIO_INGRESO) VIRTUAL;



CREATE INDEX IDX_INGEGR_PREG_INGR_ID ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(PREG_INGRESO_ID);

CREATE INDEX IDX_INGEGR_PREGINGRID_ESTREG ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(PREG_INGRESO_ID, ESTADO_REGISTRO_ID);


CREATE INDEX IDX_INGEGR_INGRID_ESTREG ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(INGRESO_ID, ESTADO_REGISTRO_ID);

CREATE INDEX IDX_INGEGR_PERNOMID_ID ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(PER_NOMINAL_ID);

CREATE INDEX IDX_INGEGR_PERNOMID_ESTREG ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(PER_NOMINAL_ID, ESTADO_REGISTRO_ID);


CREATE INDEX IDX_INGEGR_ADMINSERVID ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(ADMISION_SERVICIO_ID);

CREATE INDEX IDX_IE_ADMINSERVID_ESTREG ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(ADMISION_SERVICIO_ID, ESTADO_REGISTRO_ID);


CREATE INDEX IDX_IE_ESTREG ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(ESTADO_REGISTRO_ID);


CREATE INDEX IDX_IE_PROCEDENCIA ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(PROCEDENCIA_ID);


CREATE INDEX IDX_IE_GRP_ETAREO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(GRUPO_ETAREO_ID);


CREATE INDEX IDX_IE_SERV_PROCEDENCIA ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(SERVICIO_PROCEDENCIA_ID);


CREATE INDEX IDX_IE_USAL_INGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(UNIDAD_SALUD_INGRESO);


CREATE INDEX IDX_IE_SERV_INGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(SERVICIO_INGRESO_ID);


CREATE INDEX IDX_IE_ESTADO_INGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(ESTADO_INGRESO_ID);


CREATE INDEX IDX_IE_TIPO_EGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(TIPO_EGRESO_ID);


CREATE INDEX IDX_IE_SERV_EGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(SERVICIO_EGRESO_ID);

CREATE INDEX IDX_IE_ESTADO_PX ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(ESTADO_PX_ID);


CREATE INDEX IDX_IE_ESTADO_PX_EGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(ESTADO_PX_EGRESO_ID);


CREATE INDEX IDX_IE_MEDICO_INGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(MEDICO_INGRESO_ID);

CREATE INDEX IDX_IE_ADMIN_SOL_INGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(ADMISIONISTA_SOLICITA_INGR_ID);


CREATE INDEX IDX_IE_ADMIN_INGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(ADMISIONISTA_INGRESO_ID);

CREATE INDEX IDX_IE_MED_ORDENA_INGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(MEDICO_ORDENA_INGRESO_ID);

CREATE INDEX IDX_IE_MED_EGRESO ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
(MEDICO_EGRESO_ID);



CREATE INDEX IDX_GRPETAREO_CAT_CNF_ID ON HOSPITALARIO.SNH_REL_CNF_GRUPO_CATALOGOS
(CATALOGO_CNF_ID);



--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (PER_NOMINAL_ID NUMBER(10) CONSTRAINT NNC_INGREGR_PERNOMINALID NOT NULL);
-- 
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (UNIDAD_SALUD_INGRESO NUMBER(10) CONSTRAINT NNC_INGREGR_USALUD_ING_ID NOT NULL);
-- 
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (USUARIO_REGISTRO_EGRESO VARCHAR2(50 BYTE));
-- 
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (FECHA_REGISTRO_EGRESO TIMESTAMP(0));
-- 
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (ESTADO_PX_ID NUMBER(10));
-- 
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (ESTADO_PX_EGRESO_ID NUMBER(10));     
--
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (COMENTARIOS VARCHAR2(1000 BYTE));
--
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (FECHA_SOLICITUD_INGRESO TIMESTAMP(0) CONSTRAINT NNC_INGREGR_FECSOLICITUD_ING NOT NULL);
-- 
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (HORA_SOLICITUD_INGRESO  VARCHAR2(15 BYTE) CONSTRAINT NNC_INGREGR_HRSOLICITUD_ING NOT NULL);
-- 
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (PROCEDENCIA_ID NUMBER(10) CONSTRAINT NNC_INGREGR_PROCEDENCIA_ID NOT NULL);
-- 
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (ADMISIONISTA_SOLICITA_INGR_ID NUMBER(10) CONSTRAINT NNC_INGREGR_ADMISIONISTA_ID NOT NULL);
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (MEDICO_ORDENA_INGRESO_ID NUMBER(10) CONSTRAINT NNC_INGREGR_MEDICO_ORDENA_ID NOT NULL);        
--
--
--ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS
-- ADD (SERVICIO_PROCEDENCIA_ID  NUMBER(10) CONSTRAINT NNC_INGREGR_SRV_PROCEDENCIA_ID NOT NULL);
--
--


CREATE OR REPLACE TRIGGER TRG_AUD_SNH_INGREGR
BEFORE INSERT OR UPDATE ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS FOR EACH ROW
BEGIN
    IF INSERTING THEN
      -- :NEW.INGRESO_ID      := HOSPITALARIO.SNH_S_INGR_EGR_ID.NEXTVAL;
       :NEW.FECHA_REGISTRO  := SYSDATE;
    ELSE
       IF :NEW.USUARIO_MODIFICACION IS NULL THEN
           RAISE_APPLICATION_ERROR (-20000, 'El usuario modificación no puede quedar nulo.');
       ELSE
       :NEW.FECHA_MODIFICACION   := SYSDATE;
       END IF;
    END IF;
END;
/



-- estado registro
CREATE OR REPLACE TRIGGER HOSPITALARIO.TRG_SNH_INGREGR_ESTREG
BEFORE INSERT OR UPDATE OF ESTADO_REGISTRO_ID ON HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS FOR EACH ROW
BEGIN
    IF INSERTING THEN
      IF  (:NEW.ESTADO_REGISTRO_ID IS NOT NULL AND :NEW.ESTADO_REGISTRO_ID > 0)   THEN
             DECLARE
              vCONTEO     SIMPLE_INTEGER := 0;
              vCatalogoId CATALOGOS.SBC_CAT_CATALOGOS.CATALOGO_ID%TYPE;
             BEGIN
              SELECT COUNT (1)
                INTO vCONTEO
                FROM CATALOGOS.SBC_CAT_CATALOGOS
               WHERE CATALOGO_ID = :NEW.ESTADO_REGISTRO_ID AND
                     PASIVO = 0 AND
                     CATALOGO_SUP IS NOT NULL;
                
                CASE vCONTEO 
                WHEN 0 THEN
                     RAISE_APPLICATION_ERROR (-20000, 'El estado del registro, no es un valor valido. Estado registro id: '||:NEW.ESTADO_REGISTRO_ID);
                ELSE
                    BEGIN
                      vCONTEO := 0;
                      SELECT CATALOGO_SUP
                        INTO vCatalogoId
                        FROM CATALOGOS.SBC_CAT_CATALOGOS
                       WHERE CATALOGO_ID = :NEW.ESTADO_REGISTRO_ID AND
                             PASIVO = 0 ;
                    
                        BEGIN
                          SELECT COUNT (1)
                            INTO vCONTEO
                            FROM CATALOGOS.SBC_CAT_CATALOGOS
                           WHERE CATALOGO_ID = vCatalogoId AND
                                 PASIVO = 0 AND
                                 CODIGO = 'STREG';       
                           CASE vCONTEO 
                           WHEN 0 THEN
                                RAISE_APPLICATION_ERROR (-20000, 'El estado registro, no es un valor valido. Estado registro id: '||:NEW.ESTADO_REGISTRO_ID);                
                           ELSE NULL;
                           END CASE;
                        END;  
                    END;
                END CASE;
             END;
      END IF;
    ELSIF UPDATING THEN
       IF :NEW.ESTADO_REGISTRO_ID IS NOT NULL THEN
         IF NVL(:NEW.ESTADO_REGISTRO_ID,0) != NVL(:OLD.ESTADO_REGISTRO_ID,0) THEN
             DECLARE
              vCONTEO SIMPLE_INTEGER := 0;
              vCatalogoId CATALOGOS.SBC_CAT_CATALOGOS.CATALOGO_ID%TYPE;
             BEGIN
              SELECT COUNT (1)
                INTO vCONTEO
                FROM CATALOGOS.SBC_CAT_CATALOGOS
               WHERE CATALOGO_ID = :NEW.ESTADO_REGISTRO_ID AND
                     PASIVO = 0 AND
                     CATALOGO_SUP IS NOT NULL;
                
                CASE vCONTEO 
                WHEN 0 THEN
                     RAISE_APPLICATION_ERROR (-20000, 'El estado registro, no es un valor valido. Estado registro id: '||:NEW.ESTADO_REGISTRO_ID);
                ELSE
                    BEGIN
                      vCONTEO := 0;
                      SELECT CATALOGO_SUP
                        INTO vCatalogoId
                        FROM CATALOGOS.SBC_CAT_CATALOGOS
                       WHERE CATALOGO_ID = :NEW.ESTADO_REGISTRO_ID AND
                             PASIVO = 0 ;
                    
                        BEGIN
                          SELECT COUNT (1)
                            INTO vCONTEO
                            FROM CATALOGOS.SBC_CAT_CATALOGOS
                           WHERE CATALOGO_ID = vCatalogoId AND
                                 PASIVO = 0 AND
                                 CODIGO = 'STREG';       
                           CASE vCONTEO 
                           WHEN 0 THEN
                                RAISE_APPLICATION_ERROR (-20000, 'El estado registro, no es un valor valido. Estado registro id: '||:NEW.ESTADO_REGISTRO_ID);                
                           ELSE NULL;
                           END CASE;
                        END;  
                    END;
                END CASE;            
             END;  
         END IF;
       END IF;
    END IF;
END;
/

ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS ADD (
  CONSTRAINT FRK_INGREGR_PROCEDENICA_ID
  FOREIGN KEY (PROCEDENCIA_ID ) 
  REFERENCES CATALOGOS.SBC_CAT_CATALOGOS (CATALOGO_ID)
  ENABLE VALIDATE);
  
  
ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS ADD (
  CONSTRAINT FRK_INGREGR_ADMISIONSITA_ID
  FOREIGN KEY (ADMISIONISTA_SOLICITA_INGR_ID ) 
  REFERENCES CATALOGOS.SBC_MST_MINSA_PERSONALES (MINSA_PERSONAL_ID)
  ENABLE VALIDATE, 
  CONSTRAINT FRK_INGREGR_MED_ORDENA_ID
  FOREIGN KEY (MEDICO_ORDENA_INGRESO_ID ) 
  REFERENCES CATALOGOS.SBC_MST_MINSA_PERSONALES (MINSA_PERSONAL_ID)
  ENABLE VALIDATE,   
  CONSTRAINT FRK_INGREGR_MED_INGR_EXPID 
  FOREIGN KEY (MEDICO_INGRESO_ID) 
  REFERENCES CATALOGOS.SBC_MST_MINSA_PERSONALES (MINSA_PERSONAL_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_ADM_INGR_EXPID 
  FOREIGN KEY (ADMISIONISTA_INGRESO_ID) 
  REFERENCES CATALOGOS.SBC_MST_MINSA_PERSONALES (MINSA_PERSONAL_ID)
  ENABLE VALIDATE);


ALTER TABLE HOSPITALARIO.SNH_MST_INGRESOS_EGRESOS ADD (
  CONSTRAINT FRK_INGREGR_ADMISION_ID 
  FOREIGN KEY (PREG_INGRESO_ID) 
  REFERENCES HOSPITALARIO.SNH_MST_PREG_INGRESOS (PREG_INGRESO_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_PERNOM_ID 
  FOREIGN KEY (PER_NOMINAL_ID) 
  REFERENCES CATALOGOS.SBC_MST_PERSONAS_NOMINAL (PER_NOMINAL_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_USALINGRESO_ID 
  FOREIGN KEY (UNIDAD_SALUD_INGRESO ) 
  REFERENCES CATALOGOS.SBC_CAT_UNIDADES_SALUD (UNIDAD_SALUD_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_USE_REG_EGRESO
  FOREIGN KEY (USUARIO_REGISTRO_EGRESO ) 
  REFERENCES SEGURIDAD.SCS_MST_USUARIOS (USERNAME)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_ESTADO_PX_ID
  FOREIGN KEY (ESTADO_PX_ID ) 
  REFERENCES CATALOGOS.SBC_CAT_CATALOGOS (CATALOGO_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_ESTADO_EGR_ID
  FOREIGN KEY (ESTADO_PX_EGRESO_ID ) 
  REFERENCES CATALOGOS.SBC_CAT_CATALOGOS (CATALOGO_ID)
  ENABLE VALIDATE,  
 -- CONSTRAINT FRK_INGREGR_ADMISIONSITA_ID
 -- FOREIGN KEY (ADMISIONISTA_SOLICITA_INGR_ID ) 
 -- REFERENCES HOSPITALARIO.SNH_MST_CODIGO_EXPEDIENTE (EXPEDIENTE_ID)
 -- ENABLE VALIDATE,  
 -- CONSTRAINT FRK_INGREGR_MED_ORDENA_ID
 -- FOREIGN KEY (MEDICO_ORDENA_INGRESO_ID ) 
 -- REFERENCES HOSPITALARIO.SNH_MST_CODIGO_EXPEDIENTE (EXPEDIENTE_ID)
 -- ENABLE VALIDATE,  
  CONSTRAINT FRK_INGREGR_ADMSRV_ID 
  FOREIGN KEY (ADMISION_SERVICIO_ID) 
  REFERENCES HOSPITALARIO.SNH_MST_ADMISION_SERVICIOS (ADMISION_SERVICIO_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_INGREGR_GRUPO_ETAREO 
  FOREIGN KEY (GRUPO_ETAREO_ID) 
  REFERENCES HOSPITALARIO.SNH_REL_CNF_GRUPO_CATALOGOS (CNF_ID)
  ENABLE VALIDATE,  
 -- CONSTRAINT FRK_INGREGR_MED_INGR_EXPID 
 -- FOREIGN KEY (MEDICO_INGRESO_ID) 
 -- REFERENCES HOSPITALARIO.SNH_MST_CODIGO_EXPEDIENTE (EXPEDIENTE_ID)
 -- ENABLE VALIDATE,
 -- CONSTRAINT FRK_INGREGR_ADM_INGR_EXPID 
 -- FOREIGN KEY (ADMISIONISTA_INGRESO_ID) 
 -- REFERENCES HOSPITALARIO.SNH_MST_CODIGO_EXPEDIENTE (EXPEDIENTE_ID)
 -- ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_ESTADO_INGR_ID 
  FOREIGN KEY (ESTADO_INGRESO_ID) 
  REFERENCES CATALOGOS.SBC_CAT_CATALOGOS (CATALOGO_ID)
  ENABLE VALIDATE,  
  CONSTRAINT FRK_INGREGR_TIPO_EGRESO_ID 
  FOREIGN KEY (TIPO_EGRESO_ID) 
  REFERENCES CATALOGOS.SBC_CAT_CATALOGOS (CATALOGO_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_SERV_EGRESO_ID 
  FOREIGN KEY (SERVICIO_EGRESO_ID) 
  REFERENCES CATALOGOS.SBC_CAT_CATALOGOS (CATALOGO_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_REFERENCIA_ID 
  FOREIGN KEY (REFERENCIA_ID) 
  REFERENCES HOSPITALARIO.SNH_MST_REFERENCIAS (REFERENCIA_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_ENV_CONTRAREF_ID 
  FOREIGN KEY (ENVIO_CONTRAREFERENCIA_ID) 
  REFERENCES HOSPITALARIO.SNH_MST_REFERENCIAS (REFERENCIA_ID)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_ESTADO_REG_ID 
  FOREIGN KEY (ESTADO_REGISTRO_ID) 
  REFERENCES CATALOGOS.SBC_CAT_CATALOGOS (CATALOGO_ID)
  ENABLE VALIDATE,  
  CONSTRAINT FRK_INGREGR_USR_REGISTRO 
  FOREIGN KEY (USUARIO_REGISTRO) 
  REFERENCES SEGURIDAD.SCS_MST_USUARIOS (USERNAME)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_USR_MODIFCACION 
  FOREIGN KEY (USUARIO_MODIFICACION) 
  REFERENCES SEGURIDAD.SCS_MST_USUARIOS (USERNAME)
  ENABLE VALIDATE,
  CONSTRAINT FRK_INGREGR_USR_PASIVO 
  FOREIGN KEY (USUARIO_PASIVA) 
  REFERENCES SEGURIDAD.SCS_MST_USUARIOS (USERNAME)
  ENABLE VALIDATE  
  );
  
  
  
  SELECT *
  FROM HOSPITALARIO.SNH_MST_REFERENCIAS